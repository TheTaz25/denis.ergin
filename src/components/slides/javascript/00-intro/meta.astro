<section>
  <section>
    <h2>Was ist JavaScript?</h2>
  </section>

  <section>
    <p>JavaScript ist eine Programmiersprache mit der Inhalte auf einer Website manipuliert werden können (Read, Create, Update, Delete).</p>
    <p>Ihr Haupteinsatszweck befindet sich in Browsern, aber JavaScript und sein "Ökosystem" sind so groß gewachsen, dass es nahezu überall verwendet werden kann.</p>
  </section>

  <section>
    Zu diesen zusätzlichen Anwndungsfällen zählen:
    <ul>
      <li>Backend Development</li>
      <li>Cross-Platform Desktop Application Development</li>
      <li>Cross Platform App Development</li>
      <li>Game Development</li>
      <li>Command Line Interfaces</li>
    </ul>
  </section>

  <section>
    <p>JavaScript ist eine Script-Sprache.</p>
    <p>Code wird nicht kompiliert sondern wird mit einem Interpreter "geparsed" und dynamisch ausgeführt.</p>
    <p>JavaScript hat - obwohl sein Name - NICHTS mit Java zu tun. </p>
  </section>

  <section>
    <p>JavaScript als Sprache wird von einem Standard beschrieben: ECMAScript.</p>
    <p>In Summe sind JavaScript und ECMAScript ein Synonym zueinander und sind entsprechend gleich (falls Ihnen einmal "ECMAScript" vorkommen sollte)</p>
  </section>

  <section>
    <p>Features von JavaScript</p>
    <ul>
      <li>First-Class Functions</li>
      <li>Prototype-Based</li>
      <li>Multi-Paradigm</li>
      <li>Single-Threaded</li>
      <li>Dynamic</li>
    </ul>
  </section>

  <section>
    <p>Alles in allem ist JavaScript (JS) eine mächtige Sprache.</p>
    <p>Dadurch lassen sich viele Dinge "implementieren", die in anderen Sprachen nur durch Mehraufwand möglich sind.</p>
    <p>Problem hierbei ist aber auch, dass unerfahrene Entwickler öfters gravierende Fehler produzieren können, die JS "verschluckt" und dies wiederum zu ungewollten Situation in der Website führt.</p>
  </section>

  <section>
    <p>Die Sprache selber hat nur ein paar Kernfunktionalitäten. Browser und andere Runtimes ermöglichen den Zugriff auf verschiedene API's.</p>
    <p>So bieten Browser eine DOM-API an, um auf das Dokument selbst zuzugreifen, während NodeJS (eine Runtime zum ausführen auf dem Computer) API's zum Zugriff auf das Dateisystem bereitstellen.</p>
  </section>

  <section>
    <h3>Feature: First-Class Functions</h3>
    <p>Funktionen sind einfach als Variablen definiert. Man kann sie ggf. überschreiben und an andere Funktionen übergeben.</p>
  </section>

  <section>
    <h3>Prototype Based</h3>
    <p>In JavaScript ist alles ein Objekt mit dem man Interagieren kann.</p>
    <p>Je nachdem des Typen des Objektes (zum Beispiel "String"), enthält dieser Objekt-Typ Grundlegende Funktionalitäten, die als "Prototypen" definiert sind.</p>
    <p>Im Grundlegensten Sinne kann man das als Klassenbasiertes Verhalten Kennzeichnen.</p>
  </section>

  <section>
    <h3>Mutli-Paradigm Programming</h3>
    <p>JavaScript ist eine sehr Flexible Sprache. Sie lässt verschiedene Programmier-Arten zu die auch alle untereinander verwendet werden können.</p>
    <p>Beispiele sind: Objektorientert (mittels Klassen), Funktional (moderne Frameworks sind meist so aufgebaut), etc.</p>
  </section>

  <section>
    <h3>Single Threaded</h3>
    <p>Als Programmierer entwickelt man auf einem einzigen Thread. Hat für uns Entwickler den Vorteil das wir nicht auf Concurrency achten müssen.</p>
    <p>Nachteil hierbei ist natürlich: Wenn der Thread einen Deadlock o.ä. hat, können wir uns davon nicht mehr erholen.</p>
    <p>Aber JS bietet moderne Lösungen um lang anhaltende Operationen "auszulagern". Mehr dazu später.</p>
  </section>

  <section>
    <h3>Dynamic</h3>
    <p>In JS müssen Datentypen nicht explizit deklariert werden. Tatsächlich lassen sich keine Datentypen auf Variablen deklarieren.</p>
    <p>Moderne SuperSets wie TypeScript bilden eine Schicht auf JavaScript, um ein komplexes Typensystem zu implementieren. Am Ende wird aber jeglicher Code für Browser verständlich gebaut.</p>
  </section>
</section>